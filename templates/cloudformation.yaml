AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Contact Form using Lambda, API Gateway, and DynamoDB

Parameters:
  LambdaFunctionName:
    Type: String
    Default: ContactFormHandler
  DynamoDBTableName:
    Type: String
    Default: ContactMessages
  EmailAddress:
    Type: String
    Default: "you@example.com"  # Optional - for SNS

Resources:

  ContactFormTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: messageId
          AttributeType: S
      KeySchema:
        - AttributeName: messageId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaContactFormRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt ContactFormTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ContactFormFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Runtime: nodejs18.x
      Handler: submitMessage.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      Code:
        S3Bucket: serverless-project
        S3Key: lambda.zip
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTableName

  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ContactFormAPI

  ContactResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: contact
      RestApiId: !Ref APIGateway

  ContactMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ContactResource
      RestApiId: !Ref APIGateway
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: 
          Fn::Sub: 
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - { LambdaArn: !GetAtt ContactFormFunction.Arn }

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ContactFormFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/POST/contact
